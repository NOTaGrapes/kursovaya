//Created By NOTaGrape
//---------------------------------------------------------------------------
#ifndef diffusionCoreCodeH
#define diffusionCoreCodeH
//---------------------------------------------------------------------------
#include <vector>
#include "irregularFractalCode.h"
#include "matrixCode.h"
//---------------------------------------------------------------------------
struct StructPoint
{
	int x;		// X координата точки
	int y;		// Y координата точки
};

class DiffusionCore
{
public:
	DiffusionCore();
	DiffusionCore(irregularFractal&,int,int);
	int reinit(irregularFractal&,int,int);

	int	makeStep(irregularFractal&);
	int	collisionCheck(irregularFractal&,StructPoint);
	int borderCheck(StructPoint);
	StructPoint startCheck(irregularFractal&,StructPoint,int);
	StructPoint showPoint();
	std::vector <double>& sendStat();
	int showIter();
	int calcStat();
	StructPoint& operator[](const int index)
	{
		return memory_[index];
	}
private:
	Matrix fractal_;
	std::vector <StructPoint> memory_;
	std::vector <double> statistics_;
	int size_;
	int iter_;
	StructPoint point_;
};
//---------------------------------------------------------------------------
#endif

