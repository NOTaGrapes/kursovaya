// ---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop
//forms
#include "mainFormCode.h"
#include "settingsFormCode.h"
//my additional classes
#include "irregularFractalCode.h"
#include "matrixCode.h"
#include "strCode.h"
#include "randomizerCode.h"
#include "diffusionCoreCode.h"
#include "findCoffCode.h"
#include <random>
#include <ctime>
//testing code
//#include "testWndCode.h"
// ---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TmainForm *mainForm;
bool CycleBreak = false;

irregularFractal mainFractal;
DiffusionCore	 mainCore;
FindCoff         mainCoff;
StructPoint      slavePoint;


const int startPos      =300;
const int sizeFractal	=600;
const int iterFractal	=5;
const int sizeMainSteps	=10000;
const int sizeSubSteps	=1000;
// ---------------------------------------------------------------------------
__fastcall TmainForm::TmainForm(TComponent* Owner) : TForm(Owner)
{
	srand(time(NULL));
}
// ---------------------------------------------------------------------------
void __fastcall TmainForm::FormClose(TObject *Sender, TCloseAction &Action) {
	if (CycleBreak == false) {
		CycleBreak = true;
	}
}
// ---------------------------------------------------------------------------
void __fastcall TmainForm::SettingsStringClick(TObject *Sender) {
	settingsForm->ShowModal();
}
// ---------------------------------------------------------------------------
void __fastcall TmainForm::ExitStringClick(TObject *Sender) {
	if (CycleBreak == false) {
		CycleBreak = true;
	}
	mainForm->Close();
}
// ---------------------------------------------------------------------------
void __fastcall TmainForm::PaintBox1Paint(TObject *Sender)
{
    	Canvas->Brush->Color = clBlack;
        Canvas->FillRect(Rect(0,0,sizeFractal,sizeFractal));
}
//---------------------------------------------------------------------------
void __fastcall TmainForm::buttonPaintClick(TObject *Sender)
{
        Series1->Clear();
        Canvas->Brush->Color = clBlack;
        Canvas->FillRect(Rect(0,0,sizeFractal,sizeFractal));
        mainFractal.reinit(sizeFractal,iterFractal);
        mainFractal.calcStart();
        PaintBox1->Canvas->Pen->Color = clWhite;
                PaintBox1->Canvas->Pen->Width =1;
        for(int m=0;m!=mainFractal.size();m++)
        {
            for(int n=0;n!=mainFractal.size();n++)
            {
                if(mainFractal.carpet[m][n]==1)
                {
                        PaintBox1->Canvas->MoveTo(m,n);
                        PaintBox1->Canvas->LineTo(m+1,n+1);
                }
            }
        }
        mainCore.reinit(mainFractal,startPos,startPos);
}
//---------------------------------------------------------------------------
void __fastcall TmainForm::buttonResetClick(TObject *Sender)
{
        Series1->Clear();
        Canvas->Brush->Color = clBlack;
        Canvas->FillRect(Rect(0,0,sizeFractal,sizeFractal));
        mainFractal.reinit(sizeFractal,0);
        PaintBox1->Canvas->Pen->Color = clWhite;
        PaintBox1->Canvas->Pen->Width =1;
        for(int m=0;m!=mainFractal.size();m++)
        {
            for(int n=0;n!=mainFractal.size();n++)
            {
                if(mainFractal.carpet[m][n]==1)
                {
                        PaintBox1->Canvas->MoveTo(m,n);
                        PaintBox1->Canvas->LineTo(m+1,n+1);
                }
            }
        }
        mainCore.reinit(mainFractal,startPos,startPos);
}
//---------------------------------------------------------------------------

void __fastcall TmainForm::buttonOneStartClick(TObject *Sender)
{

	PaintBox1->Canvas->Pen->Color = clRed;
        PaintBox1->Canvas->Pen->Width =1;
        slavePoint=mainCore.showPoint();
        PaintBox1->Canvas->MoveTo(slavePoint.x,slavePoint.y);
        for (int i=1; i !=1000; i++)
        {
        	mainCore.makeSubStep(mainFractal);
            	slavePoint=mainCore.showPoint();
            	PaintBox1->Canvas->LineTo(slavePoint.x,slavePoint.y);
        }

}
//---------------------------------------------------------------------------

void __fastcall TmainForm::buttonDiffStopClick(TObject *Sender)
{
	if (CycleBreak == false) {
		CycleBreak = true;
	}
}
//---------------------------------------------------------------------------

void __fastcall TmainForm::buttonCycStartClick(TObject *Sender)
{
        PaintBox1->Canvas->Pen->Color = clRed;
        PaintBox1->Canvas->Pen->Width =1;
        ProgressBar1->Visible=true;
        ProgressBar1->Position=0;
        if(CycleBreak==true)
	{
		   CycleBreak=false;
	}
       	while(CycleBreak==false && mainCore.showIterMain()!=sizeMainSteps)
	{
                mainCore.makeMainStep(mainFractal);
                ProgressBar1->Position++;
	       	Application->ProcessMessages();
		if(CycleBreak==true)
		{
		   break;
		}
	}
        ProgressBar1->Visible=false;
}
//---------------------------------------------------------------------------

void __fastcall TmainForm::buttonDiffChartClick(TObject *Sender)
{
        mainCore.preproduction();
        mainCoff.getX(mainCore.sendMemory());
        mainCoff.imagineY();
        mainCoff.lnX();
        mainCoff.lnY();
        Label1->Caption=mainCoff.calcBetta();
        for(int i=0;i!=1000;i++)
        {
        	Series1->AddXY(i,mainCore.showMemoryRecord(i));
        }
        Label1->Visible=true;
        Label1->Caption=mainCoff.calcBetta();

}
//---------------------------------------------------------------------------


void __fastcall TmainForm::buttonPaintRegClick(TObject *Sender)
{
        Series1->Clear();
        Canvas->Brush->Color = clBlack;
        Canvas->FillRect(Rect(0,0,sizeFractal,sizeFractal));
        mainFractal.reinit(sizeFractal,iterFractal);
        mainFractal.calcStartReg();
        PaintBox1->Canvas->Pen->Color = clWhite;
        for(int m=0;m!=mainFractal.size();m++)
        {
            for(int n=0;n!=mainFractal.size();n++)
            {
                if(mainFractal.carpet[m][n]==1)
                {
                        PaintBox1->Canvas->MoveTo(m,n);
                        PaintBox1->Canvas->LineTo(m+1,n+1);
                }
            }
        }
         mainCore.reinit(mainFractal,startPos,startPos);
}
//---------------------------------------------------------------------------

